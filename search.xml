<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx]]></title>
    <url>%2F2019%2F09%2F04%2FNginx%2F</url>
    <content type="text"><![CDATA[Nginx配置文件Nginx主配置⽂件nginx.conf 是⼀个纯⽂本类型的⽂件，整个配置⽂件是以区块的 形式组织的。⼀般，每个区块以⼀对⼤括号 {} 来表示开始与结束。 Main位于nginx.conf配置⽂件的最⾼层 Main层下可以有Event、HTTP层 HTTP层下⾯有允许有多个Server层, ⽤于对不同的⽹站做不同的配置 Server层也允许有多个Location, ⽤于对不同的路径进⾏不同模块的配置 1234567891011121314151617181920212223242526272829303132333435//nginx默认配置语法user //设置nginx服务的系统使⽤⽤户worker_processes //⼯作进程, 配置和CPU个数保持⼀致error_log //错误⽇志, 后⾯接⼊的是路径pid //Nginx服务启动时的pid//events事件模块events &#123; //事件模块 worker_connections //每个worker进程⽀持的最⼤连接数 use //内核模型,select,poll,epoll&#125;//⾮虚拟主机的配置或公共配置定义在http&#123;&#125;段内, server&#123;&#125;段外http &#123;... //必须使⽤虚拟机配置站点, 每个虚拟机使⽤⼀个server&#123;&#125;段 'server'&#123; listen 80; //监听端⼝, 默认80 server_name localhost; //提供服务的域名或主机名 //控制⽹站访问路径 'location' / &#123; root /usr/share/nginx/html; //存放⽹站路径 index index.html index.htm; //默认访问⾸⻚⽂件 &#125; //指定错误代码,统⼀定义错误⻚⾯,错误代码重定向到新的Locaiton error_page 500 502 503 504 /50x.html; 'location' =/50x.html &#123; root html; &#125; &#125; ... //第⼆个虚拟主机配置 'server' &#123; ... &#125;&#125; Nginx⽇志配置在学习⽇志之前, 我们需要先了解下HTTP请求和返回 1curl -v http://www.baidu.com Nginx⽇志配置规范1234567891011121314151617//配置语法: 包括: error.log access.logSyntax: log_format name [escape=default|json] string ...;Default: log_format combined "...";Context: http//Nginx默认配置log_format main '$remote_addr - $remote_user [$time_local] "$request"' '$status $body_bytes_sent "$http_referer"' '"$http_user_agent" "$http_x_forwarded_for"';//Nginx⽇志变量$remote_addr //表示客户端地址$remote_user //http客户端请求nginx认证⽤户名$time_local //Nginx的时间$request //Request请求⾏, GET等⽅法、http协议版本$status //respoence返回状态码$body_bytes_sent //从服务端响应给客户端body信息⼤⼩$http_referer //http上⼀级⻚⾯, 防盗链、⽤户⾏为分析$http_user_agent //http头部信息, 客户端访问设备$http_x_forwarded_for //http请求携带的http信息 Nginx状态监控–with-http_stub_status_module 记录 Nginx 客户端基本访问状态信息 123Syntax: stub_status;Default: —Context: server, location 具体配置如下: 123456789101112131415location /mystatus &#123; stub_status on; access_log off;&#125;//Nginx_status概述Active connections:2 //Nginx当前活跃连接数server accepts handled requests16 16 19server表示Nginx处理接收握⼿总次数。accepts表示Nginx处理接收总连接数。请求丢失数=(握⼿数-连接数)可以看出,本次状态显示没有丢失请求。handled requests，表示总共处理了19次请求。Reading Nginx读取数据Writing Nginx写的情况Waiting Nginx开启keep-alive⻓连接情况下, 既没有读也没有写, 建⽴连接情况 Nginx下载站点Nginx默认是不允许列出整个⽬录浏览下载。 12345678910111213Syntax: autoindex on | off;Default: autoindex off;Context: http, server, location//autoindex常⽤参数autoindex_exact_size off;默认为on， 显示出⽂件的确切⼤⼩，单位是bytes。修改为off，显示出⽂件的⼤概⼤⼩，单位是kB或者MB或者GB。autoindex_localtime on;默认为off，显示的⽂件时间为GMT时间。修改为on， 显示的⽂件时间为⽂件的服务器时间。charset utf-8,gbk;默认中⽂⽬录乱码，添加上解决乱码。 配置⽬录浏览功能 1234567Nginx访问限制//开启⽬录浏览location / &#123; root html; autoindex on; autoindex_localtime on; autoindex_exact_size off;&#125; Nginx访问限制连接频率限制 limit_conn_module 请求频率限制 limit_req_module http协议的连接与请求HTTP是建⽴在TCP, 在完成HTTP请求需要先建⽴TCP三次握⼿（称为TCP连接）,在连接的基础上再HTTP请求。 HTTP 协议的连接与请求 HTTP协议版本 连接关系 HTTP1.0 TCP不能复⽤ HTTP1.1 顺序性TCP复⽤ HTTP2.0 多路复⽤TCP复⽤ HTTP 请求建⽴在⼀次 TCP 连接基础上 ⼀次 TCP 请求⾄少产⽣⼀次 HTTP 请求 Nginx连接限制配置123456789101112131415161718192021//Nginx连接限制语法Syntax: limit_conn_zone key zone=name:size;Default: —Context: httpSyntax: limit_conn zone number;Default: —Context: http, server, location//具体配置如下:http &#123;//http段配置连接限制, 同⼀时刻只允许⼀个客户端IP连接limit_conn_zone $binary_remote_addr zone=conn_zone:10m; ... server &#123; ... location / &#123; //同⼀时刻只允许⼀个客户端IP连接 limit_conn conn_zone 1; &#125;//压⼒测试yum install -y httpd-toolsab -n 50 -c 20 http://127.0.0.1/index.html Nginx 请求限制配置1234567891011121314151617181920212223//Nginx请求限制语法Syntax: limit_req_zone key zone=name:size rate=rate;Default: —Context: httpSyntax: limit_conn zone number [burst=number] [nodelay];Default: —Context: http, server, location//具体配置如下:http &#123;//http段配置请求限制, rate限制速率，限制⼀秒钟最多⼀个IP请求limit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s; ... server &#123; ... location / &#123; //1r/s只接收⼀个请求,其余请求拒绝处理并返回错误码给客户端 limit_req zone=req_zone; //请求超过1r/s,剩下的将被延迟处理,请求数超过burst定义的数量, 多余的请求返回503 #limit_req zone=req_zone burst=3 nodelay; &#125;//压⼒测试yum install -y httpd-toolsab -n 50 -c 20 http://127.0.0.1/index.html 连接限制没有请求限制有效?1234多个请求可以建⽴在⼀次的TCP连接之上, 那么我们对请求的精度限制，当然⽐对⼀个连接的限制会更加的有效。因为同⼀时刻只允许⼀个连接请求进⼊。但是同⼀时刻多个请求可以通过⼀个连接进⼊。所以请求限制才是⽐较优的解决⽅案。 Nginx访问控制基于IP的访问控制 http_access_module 基于⽤户登陆认证 http_auth_basic_module 基于IP的访问控制 12345678910111213141516171819202122//允许配置语法Syntax: allow address | CIDR | unix: | all;Default: —Context: http, server, location, limit_except//拒绝配置语法Syntax: deny address | CIDR | unix: | all;Default: —Context: http, server, location, limit_except//配置拒绝某⼀个IP, 其他全部允许location ~ ^/1.html &#123; root /usr/share/nginx/html; index index.html; deny 192.168.56.1; allow all;&#125;//只允许某⼀个⽹段访问,其它全部拒绝location / &#123; root html; index index.php index.html index.htm; allow 192.168.56.0/24; deny all;&#125; http_access_module局限性 下图是使⽤ http_x_forwarded_for 记录真实客户端IP地址以及代理服务器IP 解决⽅式1.采⽤HTTP头信息控制访问, 代理以及web服务开启 http_x_forwarded_for 2.结合geo模块作 3.通过HTTP⾃动以变量传递 基于⽤户登陆认证1234567891011121314//配置语法Syntax: auth_basic string| off;Default: auth_basic off;Context: http, server, location, limit_except//⽤户密码记录配置⽂件Syntax: auth_basic_user_file file;Default: -Context: http, server, location, limit_except//需要安装依赖组件[root@xuliangwei ~]# yum install httpd-tools[root@xuliangwei ~]# htpasswd -c /etc/nginx/auth_conf xuliangwei//可在http,server,location下添加如下信息auth_basic "Auth access Blog Input your Passwd!";auth_basic_user_file /etc/nginx/auth_conf; ⽤户认证局限性​ 1.⽤户信息依赖⽂件⽅式 ​ 2.⽤户管理⽂件过多, ⽆法联动 ​ 3.操作管理机械，效率低下 解决办法 Nginx 结合 LUA 实现⾼效验证 Nginx 结合 LDAP 利⽤ nginx-auth-ldap 模块 Nginx虚拟主机所谓虚拟主机，在web服务器⾥是⼀个独⽴的⽹站站点，这个站点对应独⽴的域名(也可能是IP或 端⼝)，具有独⽴的程序及资源⽬录，可以独⽴地对外提供服务供⽤户访问。 配置基于域名虚拟主机1234567891011121314151617181.创建web站点⽬录[root@LNMP conf]# mkdir /soft/code/&#123;www,bbs&#125;[root@LNMP conf]# echo "www" &gt; /soft/code/www/index.html[root@LNMP conf]# echo "bbs" &gt; /soft/code/bbs/index.html2.配置虚拟主机[root@LNMP conf]# cat conf.d/&#123;www,bbs&#125;.confserver &#123; listen 80; server_name www.xuliangwei.com; root /soft/code/www; ...&#125;server &#123; ... listen 80; server_name bbs.xuliangwei.com; root /soft/code/bbs;&#125; 配置不同端⼝访问不同虚拟主机123456789101112//仅修改listen监听端⼝即可, 但不能和系统端⼝发⽣冲突server &#123; ... listen 8001;Nginx虚拟主机 ...&#125;server &#123; ... listen 8002; ...&#125; 配置虚拟主机别名123456789101112131415161718192021222324所谓虚拟主机别名，就是虚拟主机设置除了主域名以外的⼀个域名，实现⽤户访问的多个域名对应同⼀个虚拟主机⽹站的功能。以www.xuliangwei.com域名的虚拟主机为例:为其增加⼀个别名xuliangwei.com时,出现⽹站内容和访问www.xuliangwei.com是⼀样的,具体配置如下：//默认配置[root@LNMP ~]# vim /etc/nginx/nginx.confserver &#123; listen 80; server_name www.xuliangwei.com;&#125;//别名配置[root@LNMP ~]# vim /etc/nginx/nginx.confserver &#123; listen 80; server_name www.xuliangwei.com xuliangwei.com; ...&#125;//使⽤Linux下curl测试结果[root@LNMP conf]# curl xuliangwei.comwww.xuliangwei.com[root@LNMP conf]# curl www.xuliangwei.comwww.xuliangwei.com//访问带www和不带www是⼀样的, 除了别名实现也可以通过rewrite实现]]></content>
  </entry>
  <entry>
    <title><![CDATA[mysql性能优化常用命令]]></title>
    <url>%2F2019%2F08%2F26%2Fmysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1mysql&gt; show global status; 可以列出MySQL服务器运行各种状态值，另外，查询MySQL服务器配置信息语句： 1mysql&gt; show variables; 一、慢查询 1 mysql&gt; show variables like &apos;%slow%&apos;; 1 mysql&gt; show global status like &apos;%slow%&apos;; 配置中打开了记录慢查询，执行时间超过2秒的即为慢查询，系统显示有4148个慢查询，你可以分析慢查询日志，找出有问题的SQL语句，慢查询时间不宜设置过长，否则意义不大，最好在5秒以内，如果你需要微秒级别的慢查询，可以考虑给MySQL打补丁：http://www.percona.com/docs/wiki/release:start，记得找对应的版本。打开慢查询日志可能会对系统性能有一点点影响，如果你的MySQL是主-从结构，可以考虑打开其中一台从服务器的慢查询日志，这样既可以监控慢查询，对系统性能影响又小。 二、连接数 经常会遇见”MySQL: ERROR 1040: Too many connections”的情况，一种是访问量确实很高，MySQL服务器抗不住，这个时候就要考虑增加从服务器分散读压力，另外一种情况是MySQL配置文件中max_connections值过小： 1mysql&gt; show variables like &apos;max_connections&apos;; 查询结果如下 Variable_name Value max_connections 256 这台MySQL服务器最大连接数是256，然后查询一下服务器响应的最大连接数： 1mysql&gt; show global status like ‘Max_used_connections’; MySQL服务器过去的最大连接数是245，没有达到服务器连接数上限256，应该没有出现1040错误，比较理想的设置是： Max_used_connections / max_connections * 100% ≈ 85% 最大连接数占上限连接数的85%左右，如果发现比例在10%以下，MySQL服务器连接数上限设置的过高了。 三、Key_buffer_size key_buffer_size是对MyISAM表性能影响最大的一个参数，下面一台以MyISAM为主要存储引擎服务器的配置： 1mysql&gt; show variables like ‘key_buffer_size’; Variable_name Variable_name key_buffer_size 536870912 分配了512MB内存给key_buffer_size，我们再看一下key_buffer_size的使用情况： 1 mysql&gt; show global status like &apos;key_read%&apos;; Variable_name Value mysql Key_read_requests 27813678764 Key_reads 6798830 一共有27813678764个索引读取请求，有6798830个请求在内存中没有找到直接从硬盘读取索引，计算索引未命中缓存的概率： 1 key_cache_miss_rate = Key_reads / Key_read_requests * 100% 比如上面的数据，key_cache_miss_rate为0.0244%，4000个索引读取请求才有一个直接读硬盘，已经很BT了,key_cache_miss_rate在0.1%以下都很好(每1000个请求有一个直接读硬盘)，如果key_cache_miss_rate在0.01%以下的话，key_buffer_size分配的过多，可以适当减少。 MySQL服务器还提供了key_blocks_*参数： 1 mysql&gt; show global status like &apos;key_blocks_u%&apos;; Variable_name Value Key_blocks_unused 0 Key_blocks_used 413543 Key_blocks_unused表示未使用的缓存簇(blocks)数，Key_blocks_used表示曾经用到的最大的blocks数，比如这台服务器，所有的缓存都用到了，要么增加key_buffer_size，要么就是过渡索引了，把缓存占满了。比较理想的设置： Key_blocks_used / (Key_blocks_unused + Key_blocks_used) * 100% ≈ 80% 四、临时表 1mysql&gt; show global status like &apos;created_tmp%&apos;; Variable_name Value Created_tmp_disk_tables 21197 Created_tmp_files 58 Created_tmp_tables 1771587 每次创建临时表，Created_tmp_tables增加，如果是在磁盘上创建临时表，Created_tmp_disk_tables也增加,Created_tmp_files表示MySQL服务创建的临时文件文件数，比较理想的配置是： Created_tmp_disk_tables / Created_tmp_tables * 100% &lt;= 25% 比如上面的服务器Created_tmp_disk_tables / Created_tmp_tables * 100% = 1.20%，应该相当好了。我们再看一下MySQL服务器对临时表的配置。 1mysql&gt; show variables where Variable_name in (&apos;tmp_table_size&apos;, &apos;max_heap_table_size&apos;); Variable_name Value max_heap_table_size 268435456 tmp_table_size 536870912 只有256MB以下的临时表才能全部放内存，超过的就会用到硬盘临时表。 五、Open Table情况 1 mysql&gt; show global status like &apos;open%tables%&apos;; Variable_name Value Open_tables 919 Opened_tables 1951 Open_tables表示打开表的数量，Opened_tables表示打开过的表数量，如果Opened_tables数量过大，说明配置中table_cache(5.1.3之后这个值叫做table_open_cache)值可能太小，我们查询一下服务器table_cache值： 1mysql&gt; show variables like &apos;table_cache&apos;; Variable_name Value table_cache 2048 比较合适的值为： Open_tables / Opened_tables * 100% &gt;= 85% Open_tables / table_cache * 100% &lt;= 95% 六、进程使用情况 1mysql&gt; show global status like ‘Thread%’; Variable_name Value Threads_cached 46 Threads_connected 2 Threads_created 570 Threads_running 1 如果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)。Threads_created表示创建过的线程数，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器thread_cache_size配置： 1mysql&gt; show variables like &apos;thread_cache_size&apos;; 七、查询缓存(query cache) 1mysql&gt; show global status like &apos;qcache%&apos;; Variable_name Value Qcache_free_blocks 22756 Qcache_free_memory 76764704 Qcache_hits 213028692 Qcache_inserts 208894227 Qcache_lowmem_prunes 4010916 Qcache_not_cached 13385031 Qcache_queries_in_cache 43560 Qcache_total_blocks 111212 MySQL查询缓存变量解释： Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。Qcache_free_memory：缓存中的空闲内存。Qcache_hits：每次查询在缓存中命中时就增大Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。Qcache_lowmem_prunes：缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看;如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。(上面的 free_blocks和free_memory可以告诉您属于哪种情况)Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。Qcache_queries_in_cache：当前缓存的查询(和响应)的数量。Qcache_total_blocks：缓存中块的数量。 我们再查询一下服务器关于query_cache的配置 1mysql&gt; show variables like &apos;query_cache%&apos;; Variable_name Value query_cache_limit 2097152 query_cache_min_res_unit 4096 query_cache_size 203423744 query_cache_type ON query_cache_wlock_invalidate OFF 各字段的解释： query_cache_limit：超过此大小的查询将不缓存query_cache_min_res_unit：缓存块的最小大小query_cache_size：查询缓存大小query_cache_type：缓存类型，决定缓存什么样的查询，示例中表示不缓存 select sql_no_cache 查询query_cache_wlock_invalidate：当有其他客户端正在对MyISAM表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。query_cache_min_res_unit的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。查询缓存利用率 = (query_cache_size - Qcache_free_memory) / query_cache_size * 100%查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小;查询缓存利用率在80%以上而且Qcache_lowmem_prunes &gt; 50的话说明query_cache_size可能有点小，要不就是碎片太多。查询缓存命中率 = (Qcache_hits - Qcache_inserts) / Qcache_hits * 100%示例服务器 查询缓存碎片率 = 20.46%，查询缓存利用率 = 62.26%，查询缓存命中率 = 1.94%，命中率很差，可能写操作比较频繁吧，而且可能有些碎片。 八、排序使用情况 1 mysql&gt; show global status like &apos;sort%&apos;; Variable_name Value Sort_merge_passes 29 Sort_range 37432840 Sort_rows 9178691532 Sort_scan 1860569 Sort_merge_passes 包括两步。MySQL 首先会尝试在内存中做排序，使用的内存大小由系统变量 Sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，MySQL 就会把每次在内存中排序的结果存到临时文件中，等 MySQL 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 Sort_merge_passes。实际上，MySQL 会用另一个临时文件来存再次排序的结果，所以通常会看到 Sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 Sort_buffer_size 会减少 Sort_merge_passes 和 创建临时文件的次数。但盲目的增加 Sort_buffer_size 并不一定能提高速度，见 How fast can you sort data with MySQL?(引自http://qroom.blogspot.com/2007/09/mysql-select-sort.html，貌似被墙) mysql另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的好处，参见：http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is-read_rnd_buffer_size/ 九、文件打开数(open_files) 1 mysql&gt; show global status like &apos;open_files&apos;; Variable_namev Value Open_files 1410 1mysql&gt; show variables like &apos;open_files_limit&apos;; Variable_name Value open_files_limit 4590 比较合适的设置：Open_files / open_files_limit * 100% &lt;= 75% 十、表锁情况 1mysql&gt; show global status like &apos;table_locks%&apos;; Variable_name Value Table_locks_immediate 490206328 Table_locks_waited 2084912 Table_locks_immediate表示立即释放表锁数，Table_locks_waited表示需要等待的表锁数，如果Table_locks_immediate / Table_locks_waited &gt; 5000，最好采用InnoDB引擎，因为InnoDB是行锁而MyISAM是表锁，对于高并发写入的应用InnoDB效果会好些。示例中的服务器Table_locks_immediate / Table_locks_waited = 235，MyISAM就足够了。 十一、表扫描情况 1mysql&gt; show global status like &apos;handler_read%&apos;; Variable_name Value Handler_read_first 5803750 Handler_read_key 6049319850 Handler_read_next 94440908210 Handler_read_prev 34822001724 Handler_read_rnd 405482605 Handler_read_rnd_next 18912877839 各字段解释参见http://hi.baidu.com/thinkinginlamp/blog/item/31690cd7c4bc5cdaa144df9c.html，调出服务器完成的查询请求次数： 1mysql&gt; show global status like &apos;com_select&apos;; Variable_name value Com_select 222693559 计算表扫描率： 表扫描率 = Handler_read_rnd_next / Com_select 如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8MB。]]></content>
  </entry>
  <entry>
    <title><![CDATA[k8s]]></title>
    <url>%2F2019%2F08%2F26%2Fk8s%2F</url>
    <content type="text"><![CDATA[1.K8S架构和组件 1.1 Master Kubernetes API Server 作为Kubernetes系统的入口，其封装了核心对象的增删改查操作，以RESTful API接口方式提供给外部客户和内部组件调用。维护的REST对象持久化到Etcd中存储。 Kubernetes Scheduler为新建立的Pod进行节点(node)选择(即分配机器)，负责集群的资源调度。组件抽离，可以方便替换成其他调度器。 Kubernetes Controller 负责执行各种控制器，目前已经提供了很多控制器来保证Kubernetes的正常运行。 Replication Controller 管理维护Replication Controller，关联Replication Controller和Pod，保证Replication Controller定义的副本数量与实际运行Pod数量一致。 1.2 Node Kubelet 负责管控容器，Kubelet会从Kubernetes API Server接收Pod的创建请求，启动和停止容器，监控容器运行状态并汇报给Kubernetes API Server。 Kubernetes Proxy 负责为Pod创建代理服务，Kubernetes Proxy会从Kubernetes API Server获取所有的Service信息，并根据Service的信息创建代理服务，实现Service到Pod的请求路由和转发，从而实现Kubernetes层级的虚拟转发网络。 Docker Node上需要运行容器服务 2.K8S集群搭建常见问题 解决 kubectl get pods时No resources found问题 1、vim /etc/kubernetes/apiserver2、找到”KUBE_ADMISSION_CONTROL=”- admission_control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota”，去掉ServiceAccount，保存退出。3、systemctl restart kube-apiserver 重启此服务 pull 失败 解决方案1 1、yum install rhsm -y 2、docker pull registry.access.redhat.com/rhel7/pod-infrastructure:latest 如果以上两步解决问题了，那么就不需要在执行下面操作 3、docker search pod-infrastructure 4、docker pull docker.io/tianyebj/pod-infrastructure 5、docker tag tianyebj/pod-infrastructure 192.168.126.143:5000/pod-infrastructure 6、docker push 192.168.126.143:5000/pod-infrastructure 7、vi /etc/kubernetes/kubelet 修改 KUBELET_POD_INFRA_CONTAINER=”–pod-infra-container-image=192.168.126.143:5000/pod- infrastructure:latest” 8、重启服务 systemctl restart kube-apiserversystemctl restart kube-controller-managersystemctl restart kube-schedulersystemctl restart kubeletsystemctl restart kube-proxy 解决方案2 1、docker pull kubernetes/pause 2、docker tag docker.io/kubernetes/pause:latest 192.168.126.143:5000/google_containers/pause-amd64.3.0 3、docker push 192.168.126.143:5000/google_containers/pause-amd64.3.0 4、vi /etc/kubernetes/kubelet配置为 ​ KUBELET_ARGS=”–pod_infra_container_image=192.168.126.143:5000/google_containers/pause-amd64.3.0” 5、重启kubelet服务 systemctl restart kubelet 12345私有仓库搭建docker pull registrydocker run -di --name=registry -p 5000:5000 registry修改daemon.json &#123;&quot;insecure-registries&quot;:[&quot;192.168.126.148:5000&quot;]&#125;重启docker服务 systemctl restart docker 3.常用命令 获取当前命名空间下的容器 kubectl get pods 获取所有容器l列表 kubectl get all 创建 容器 kubectl create -f kubernate-pvc.yaml 删除容器 kubectl delete pods/test-pd 或者 kubectl delete -f rc-nginx.yaml 查看指定pod跑在哪个node上 kubectl get pod /test-pd -o wide 查看容器日志 Kubectl logs nginx-8586cf59-mwwtc 进入容器终端命令 kubectl exec -it nginx-8586cf59-mwwtc /bin/bash 一个Pod里含有多个容器 用–container or -c 参数。 例如:假如这里有个Pod名为my-pod,这个Pod有两个容器,分别名为main-app 和 helper-app,下面的命令将打开到main-app的shell的容器里。 kubectl exec -it my-pod –container main-app – /bin/bash 容器详情列表 kubectl describe pod/mysql- m8rbl 查看容器状态 kubectl get svc]]></content>
  </entry>
</search>
